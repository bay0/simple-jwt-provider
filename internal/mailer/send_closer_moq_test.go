// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mailer

import (
	"io"
	"sync"
)

var (
	locksendCloserMockClose sync.RWMutex
	locksendCloserMockSend  sync.RWMutex
)

// Ensure, that sendCloserMock does implement sendCloser.
// If this is not the case, regenerate this file with moq.
var _ sendCloser = &sendCloserMock{}

// sendCloserMock is a mock implementation of sendCloser.
//
//     func TestSomethingThatUsessendCloser(t *testing.T) {
//
//         // make and configure a mocked sendCloser
//         mockedsendCloser := &sendCloserMock{
//             CloseFunc: func() error {
// 	               panic("mock out the Close method")
//             },
//             SendFunc: func(from string, to []string, msg io.WriterTo) error {
// 	               panic("mock out the Send method")
//             },
//         }
//
//         // use mockedsendCloser in code that requires sendCloser
//         // and then make assertions.
//
//     }
type sendCloserMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// SendFunc mocks the Send method.
	SendFunc func(from string, to []string, msg io.WriterTo) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// From is the from argument value.
			From string
			// To is the to argument value.
			To []string
			// Msg is the msg argument value.
			Msg io.WriterTo
		}
	}
}

// Close calls CloseFunc.
func (mock *sendCloserMock) Close() error {
	if mock.CloseFunc == nil {
		panic("sendCloserMock.CloseFunc: method is nil but sendCloser.Close was just called")
	}
	callInfo := struct {
	}{}
	locksendCloserMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	locksendCloserMockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedsendCloser.CloseCalls())
func (mock *sendCloserMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	locksendCloserMockClose.RLock()
	calls = mock.calls.Close
	locksendCloserMockClose.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *sendCloserMock) Send(from string, to []string, msg io.WriterTo) error {
	if mock.SendFunc == nil {
		panic("sendCloserMock.SendFunc: method is nil but sendCloser.Send was just called")
	}
	callInfo := struct {
		From string
		To   []string
		Msg  io.WriterTo
	}{
		From: from,
		To:   to,
		Msg:  msg,
	}
	locksendCloserMockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	locksendCloserMockSend.Unlock()
	return mock.SendFunc(from, to, msg)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedsendCloser.SendCalls())
func (mock *sendCloserMock) SendCalls() []struct {
	From string
	To   []string
	Msg  io.WriterTo
} {
	var calls []struct {
		From string
		To   []string
		Msg  io.WriterTo
	}
	locksendCloserMockSend.RLock()
	calls = mock.calls.Send
	locksendCloserMockSend.RUnlock()
	return calls
}
